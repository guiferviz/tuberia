[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = [
    "{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>",
]
license = "MIT"
readme = "README.md"
keywords = [
    "{{ cookiecutter.project_slug }}",
]
repository = "https://github.com/{{ cookiecutter.author_name }}/{{ cookiecutter.project_slug }}"

[tool.poetry.dependencies]
python = "^3.10"
pyspark = { version = "{{ cookiecutter.spark_version }}", optional = true }
# Spark version must be in sync with delta-spark.
delta-spark = { version = "2.1.0", optional = true }

[tool.poetry.extras]
pyspark = ["pyspark", "delta-spark"]

[tool.poetry.group.dev.dependencies]
Flake8-pyproject = "^1.1.0.post0"
pytest = "^7.1.3"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
pdbpp = "^0.10.3"
black = "^22.10.0"
isort = "^5.10.1"
pre-commit = "^2.20.0"
cruft = "^2.11.1"

[build-system]
requires = ["poetry>={{ cookiecutter.min_poetry_version }}"]
build-backend = "poetry.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vvv"
testpaths = [
    "tests/"
]
markers = [
    "slow",  # mark test as slow
]

[tool.black]
line-length = 80

[tool.isort]
profile = "black"
line_length = 80

[tool.pyright]
include = ["src"]
exclude = [
]

[tool.flake8]
per-file-ignores = [
    # Imported but unused.
    "__init__.py:F401",
]
exclude = [
    ".git",
    "__pycache__",
]
extend-ignore = [
    # Indentation — black handles
    "E1",
    "W1",
    # Whitespace — black handles
    "E2",
    "W2",
    # Blank lines — black handles
    "E3",
    "W3",
    # Imports — isort handles
    "E4",
    "W4",
    # Line length — black handles
    "E5",
    "W5",
]
max-line-length = 100
# Print the total number of errors.
count = true
# Print the source code generating the error/warning in question.
show-source = true
# Count the number of occurrences of each error/warning code and print a report.
statistics = true

[tool.coverage.report]
# Regexes for lines to exclude from coverage
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "except ImportError",
    'if __name__ == "__main__":',
    "@overload"
]
